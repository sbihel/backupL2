from ships_layouts import *
from random import shuffle

from xml.dom import minidom
import xml.etree.ElementTree as ET
import os


def extractShip(nameShip, typeShip, xmlID, ID=1):
    tree = ET.parse('xmlShips/'+nameShip+typeShip[-1]+str(xmlID)+'.xml')
    root = tree.getroot()
    ship = genShip(ID, nameShip, typeShip)

    node = root

    if node.findall('add'):
        k = node.findall('add')[0]
        if k.findall('energy'):
            e = int(k.findall('energy')[0].text)
            ship.setPowerAvailable(ship.getPowerAvailable()+e)
            ship.setMaxPower(ship.getMaxPower()+e)

        if k.findall('system'):
            for s in k.findall('system')[0]:
                if not ship.hasSystem(s.tag):
                    ship.addSystem(s.tag)
                system = ship.getSystem(s.tag)
                system.setMaxPower(system.getMaxPower()+int(s.text))
                system.setCurrentMaxPower(system.getCurrentMaxPower()+int(s.text))

        if k.findall('weapon'):
            for w in k.findall('weapon')[0].text.split(' '):
                ship.getSystem('weaponControl').addWeapon(genWeapon(w))

    return ship


def createRandomShip(maxCost, **kwargs):
    costs = {'energy': [30]*5 + [20]*5 + [25]*5 + [30]*5 + [35]*5,
             'shields': [125, 100, 20, 30, 40, 60, 80, 100],
             'engines': [0, 10, 15, 30, 40, 60, 80, 120],
             'weaponControl': [0, 40, 25, 35, 50, 75, 90, 100],
             'oxygen': [0, 25, 50],
             'medbay': [60, 35, 45],
             'cloneBay': [55, 35, 45],
             'droneControl': [35, 0, 20, 30, 45, 60, 80, 100],
             'hacking': [80, 35, 60],
             'mindControl': [75, 30, 60],
             'crewTeleporter': [90, 30, 60],
             'cloaking': [150, 30, 50],
             'piloting': [0, 20, 50],
             'sensors': [40, 25, 40],
             'doorSystem': [60, 35, 50],
             'backupBattery': [35, 50]}
    weapons = [('leto', 20, 1), ('artemisPL', 38, 1), ('hermes', 45, 3), ('pegasus', 60, 3), ('breach', 65, 3),
               ('hull', 65, 2), ('miniBeam', 20, 1), ('pikeBeam', 55, 2), ('halberdBeam', 65, 3), ('glaiveBeam', 95, 4),
               ('fireBeam', 50, 2), ('hullBeam', 70, 2), ('antibioBeam', 50, 2), ('basicLaser', 20, 1),
               ('dualLaser', 25, 1), ('burstLaserI', 50, 2), ('burstLaserII', 80, 2), ('burstLaserIII', 95, 4),
               ('heavyPierceI', 55, 2), ('heavyLaserI', 55, 1), ('heavyLaserII', 65, 3), ('hullLaserI', 55, 2),
               ('hullLaserII', 75, 3), ('ionBlastI', 30, 1), ('ionBlastII', 70, 3), ('heavyIon', 45, 2)]
    # (weaponName, cost, powerRequired)
    shuffle(weapons)

    ships = {'kestrel': ['typeA', 'typeB'],
             'engiCruiser': ['typeA']}

    nameShip, typeShip = None, None
    for k in ships:
        nameShip = k
        typeShip = ships[k][randrange(len(ships[k]))]
        break
    if 'nameShip' in kwargs:
        nameShip = kwargs['nameShip']
    if 'typeShip' in kwargs:
        typeShip = kwargs['typeShip']
    totalCost = 0
    ship = genShip(1, nameShip, typeShip)
    systemsUpgrades = {}
    energyAdded = 0
    weaponsAdded = []
    if 'weaponsWanted' in kwargs:
        s = ship.getSystem('weaponControl')
        for nameW in kwargs['weaponsWanted']:
            try:
                w = [x for x in weapons if x[0] == nameW][0]
            except IndexError:
                continue
            c = w[1]  # cost of the weapon
            if c < maxCost-totalCost and len(s.getWeapons()) < s.getMaxWeapons():
                need = upgradeNeededWeapons(s, w[2])
                if need > 0:
                    for i in range(need):
                        if s.getMaxPower()+i < len(costs['weaponControl']):
                            c += costs['weaponControl'][s.getMaxPower()+i]
                if c < maxCost-totalCost:
                    totalCost += c
                    s.addWeapon(genWeapon(w[0]))
                    s.setMaxPower(s.getMaxPower()+need)
                    if 'weaponControl' not in systemsUpgrades and need > 0:
                        systemsUpgrades['weaponControl'] = need
                    elif need > 0:
                        systemsUpgrades['weaponControl'] += need
                    weaponsAdded += [w[0]]
                    maxBuy = maxUpgradeCanBuySystem(ship.getMaxPower(), 'energy', maxCost-totalCost)
                    if maxBuy > need:
                        maxBuy = need
                    for i in range(maxBuy):
                        if randrange(100) < 75:
                            totalCost += costs['energy'][ship.getMaxPower()]
                            ship.setMaxPower(ship.getMaxPower()+1)
                            energyAdded += 1

    while totalCost < maxCost - 30:
        # Shields
        if randrange(100) < 100/6:
            tryAgain = 100
            s = ship.getSystem('shields')
            while tryAgain > 50 and totalCost < maxCost - 30 and s.getMaxPower() < 8:
                lvl = levelSystem(ship, 'shields')
                maxBuy = maxUpgradeCanBuySystem(lvl, 'shields', maxCost-totalCost)
                if maxBuy != 0 and lvl % 2 == 1:
                    totalCost += costs['shields'][lvl]
                    s.setMaxPower(s.getMaxPower()+1)
                    if 'shields' not in systemsUpgrades:
                        systemsUpgrades['shields'] += 1
                    else:
                        systemsUpgrades['shields'] = 1
                elif maxBuy > 1:
                    totalCost += costs['shields'][lvl] + costs['shields'][lvl+1]
                    s.setMaxPower(s.getMaxPower()+2)
                    if 'shields' not in systemsUpgrades:
                        systemsUpgrades['shields'] = 2
                    else:
                        systemsUpgrades['shields'] += 2
                maxBuy = maxUpgradeCanBuySystem(ship.getMaxPower(), 'energy', maxCost-totalCost)
                if randrange(100) > 50 and maxBuy > 0:
                    totalCost += costs['energy'][ship.getMaxPower()]
                    ship.setMaxPower(ship.getMaxPower()+1)
                    energyAdded += 1
                tryAgain = randrange(100)

        # Piloting
        if randrange(100) < 100/15:
            s = ship.getSystem('piloting')
            lvl = levelSystem(ship, 'piloting')
            maxBuy = maxUpgradeCanBuySystem(lvl, 'piloting', maxCost-totalCost)
            if maxBuy > 0:
                nbBuy = randrange(maxBuy)
            else:
                nbBuy = 0
            if nbBuy > 0:
                if nbBuy == 1:
                    totalCost += costs['piloting'][lvl]
                    s.setMaxPower(s.getMaxPower()+1)
                    if 'piloting' not in systemsUpgrades:
                        systemsUpgrades['piloting'] = 1
                    else:
                        systemsUpgrades['piloting'] += 1
                if nbBuy == 2:
                    totalCost += costs['piloting'][lvl] + costs['piloting'][lvl+1]
                    s.setMaxPower(s.getMaxPower()+2)
                    systemsUpgrades['piloting'] = 2
                maxBuy = maxUpgradeCanBuySystem(ship.getMaxPower(), 'energy', maxCost-totalCost)
                if maxBuy > nbBuy:
                    maxBuy = nbBuy
                for i in range(maxBuy):
                    if randrange(100) > 50:
                        totalCost += costs['energy'][ship.getMaxPower()]
                        ship.setMaxPower(ship.getMaxPower()+1)
                        energyAdded += 1

        # Weapons and weaponControl
        if randrange(100) < 100/6:
            s = ship.getSystem('weaponControl')
            for w in weapons:
                c = w[1]  # cost of the weapon
                if c < maxCost-totalCost and len(s.getWeapons()) < s.getMaxWeapons():
                    need = upgradeNeededWeapons(s, w[2])
                    if need > 0:
                        for i in range(need):
                            if s.getMaxPower()+i < len(costs['weaponControl']):
                                c += costs['weaponControl'][s.getMaxPower()+i]
                    if c < maxCost-totalCost:
                        totalCost += c
                        s.addWeapon(genWeapon(w[0]))
                        s.setMaxPower(s.getMaxPower()+need)
                        if 'weaponControl' not in systemsUpgrades and need > 0:
                            systemsUpgrades['weaponControl'] = need
                        elif need > 0:
                            systemsUpgrades['weaponControl'] += need
                        weaponsAdded += [w[0]]
                        maxBuy = maxUpgradeCanBuySystem(ship.getMaxPower(), 'energy', maxCost-totalCost)
                        if maxBuy > need:
                            maxBuy = need
                        for i in range(maxBuy):
                            if randrange(100) < 75:
                                totalCost += costs['energy'][ship.getMaxPower()]
                                ship.setMaxPower(ship.getMaxPower()+1)
                                energyAdded += 1

        # Engines
        if randrange(100) < 100/10:
            s = ship.getSystem('engines')
            lvl = levelSystem(ship, 'engines')
            maxBuy = maxUpgradeCanBuySystem(lvl, 'engines', maxCost-totalCost)
            if maxBuy > 0:
                nbBuy = randrange(maxBuy)
            else:
                nbBuy = 0
            if nbBuy > 0:
                for i in range(nbBuy):
                    totalCost += costs['engines'][lvl+i]
                s.setMaxPower(s.getMaxPower()+nbBuy)
                if 'engines' not in systemsUpgrades:
                    systemsUpgrades['engines'] = nbBuy
                else:
                    systemsUpgrades['engines'] += nbBuy
                maxBuy = maxUpgradeCanBuySystem(ship.getMaxPower(), 'energy', maxCost-totalCost)
                if maxBuy > nbBuy:
                    maxBuy = nbBuy
                for i in range(maxBuy):
                    if randrange(100) > 50:
                        totalCost += costs['energy'][ship.getMaxPower()]
                        ship.setMaxPower(ship.getMaxPower()+1)
                        energyAdded += 1

        # Cloaking
        if randrange(100) < 100/8:
            if not ship.hasSystem('cloaking'):
                maxBuy = maxUpgradeCanBuySystem(0, 'cloaking', maxCost-totalCost)
                if maxBuy > 0:
                    totalCost += costs['cloaking'][0]
                    ship.addSystem('cloaking')
                    systemsUpgrades['cloaking'] = 1
                    maxBuy = maxUpgradeCanBuySystem(ship.getMaxPower(), 'energy', maxCost-totalCost)
                    if maxBuy > 0 and randrange(100) < 75:
                        totalCost += costs['energy'][ship.getMaxPower()]
                        ship.setMaxPower(ship.getMaxPower()+1)
                        energyAdded += 1
            if ship.hasSystem('cloaking'):
                s = ship.getSystem('cloaking')
                lvl = levelSystem(ship, 'cloaking')
                maxBuy = maxUpgradeCanBuySystem(lvl, 'cloaking', maxCost-totalCost)
                if maxBuy > 0:
                    nbBuy = randrange(maxBuy)
                else:
                    nbBuy = 0
                if nbBuy > 0:
                    for i in range(nbBuy):
                        totalCost += costs['cloaking'][lvl+i]
                    s.setMaxPower(s.getMaxPower()+nbBuy)
                    if 'cloaking' not in systemsUpgrades:
                        systemsUpgrades['cloaking'] = nbBuy
                    else:
                        systemsUpgrades['cloaking'] += nbBuy
                    maxBuy = maxUpgradeCanBuySystem(ship.getMaxPower(), 'energy', maxCost-totalCost)
                    if maxBuy > nbBuy:
                        maxBuy = nbBuy
                    for i in range(maxBuy):
                        if randrange(100) > 50:
                            totalCost += costs['energy'][ship.getMaxPower()]
                            ship.setMaxPower(ship.getMaxPower()+1)
                            energyAdded += 1

    writeNewShip(nameShip, typeShip, systemsUpgrades, weaponsAdded, energyAdded, totalCost)


def levelSystem(ship, nameSystem):
    if not ship.hasSystem(nameSystem):
        return 0
    else:
        return ship.getSystem(nameSystem).getMaxPower()


def maxUpgradeCanBuySystem(lvlSystem, nameSystem, scrapsAvailable):
    """
    @param lvlSystem: 0->no system
    """
    costs = {'energy': [30]*5 + [20]*5 + [25]*5 + [30]*5 + [35]*5,
             'shields': [125, 100, 20, 30, 40, 60, 80, 100],
             'engines': [0, 10, 15, 30, 40, 60, 80, 120],
             'weaponControl': [0, 40, 25, 35, 50, 75, 90, 100],
             'oxygen': [0, 25, 50],
             'medbay': [60, 35, 45],
             'cloneBay': [55, 35, 45],
             'droneControl': [35, 0, 20, 30, 45, 60, 80, 100],
             'hacking': [80, 35, 60],
             'mindControl': [75, 30, 60],
             'crewTeleporter': [90, 30, 60],
             'cloaking': [150, 30, 50],
             'piloting': [0, 20, 50],
             'sensors': [40, 25, 40],
             'doorSystem': [60, 35, 50],
             'backupBattery': [35, 50]}
    lvl = lvlSystem
    scraps = scrapsAvailable
    while lvl != len(costs[nameSystem])-1 and scraps >= costs[nameSystem][lvl]:
        scraps -= costs[nameSystem][lvl]
        lvl += 1
    return lvl-lvlSystem


def upgradeNeededWeapons(system, powerNewWeapon):
    total = powerNewWeapon
    for w in system.getWeapons():
        total += w.getPower()
    result = system.getMaxPower() - total
    if result < 0:
        return - result
    return 0


def writeNewShip(nameShip, typeShip, systemsUpgrades, weaponsPurchased, energyPurchased, cost):
    """ create new xml file for this ship
    """
    ship = ET.Element('ship')
    add = ET.SubElement(ship, 'add')
    costB = ET.SubElement(ship, 'cost').text = str(cost)
    energy = ET.SubElement(add, 'energy').text = str(energyPurchased)
    system = ET.SubElement(add, 'system')
    for s in systemsUpgrades:
        exec(s+' = ET.SubElement(system, s).text = str(systemsUpgrades[s])')
    weapon = ET.SubElement(add, 'weapon').text = ' '.join(weaponsPurchased)

    if 'testxmlShips' not in os.getcwd():
        os.chdir('testxmlShips/')
    nameFile = nameShip+typeShip[-1]
    files = sorted([f for f in os.listdir(os.getcwd()) if nameFile in f],
                   key=lambda x: int(x[len(nameShip)+1:-4]))
    xmlID = '0'
    if files:
        xmlID = str(int(files[-1][len(nameShip)+1:-4])+1)
    ship = prettify(ship)
    print(ship)
    ship = ET.fromstring(ship)
    tree = ET.ElementTree(ship)
    tree.write(nameFile+xmlID+'.xml')
    print('New file is : '+nameFile+xmlID+'.xml')


def prettify(elem):
    """
    Return a pretty-printed XML string for the Element.
    """
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

if __name__ == '__main__':
    for p in range(10):
        createRandomShip(500)