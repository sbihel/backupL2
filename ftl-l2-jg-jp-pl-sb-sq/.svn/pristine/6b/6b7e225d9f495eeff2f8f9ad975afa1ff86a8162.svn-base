from expertSystem import *


def multipleOptimization(maxCost, nbCombats, sizeFirstPopulation, nbInitGeneticAlgo=1):
    """
    Takes a lot of time to do multiple techniques to determine the best
    """
    nbChampions = sizeFirstPopulation//3
    if nbChampions < 2:
        nbChampions = 2
    hallOfFame, hallOfShame = [], []
    for _ in range(nbInitGeneticAlgo):
        gAlgo = autoStopGeneticAlgorithm(sizeFirstPopulation, maxCost, nbCombats, nbChampions=nbChampions)
        for bC in gAlgo[0]:
            hallOfFame += [bC]
        for bC in gAlgo[1]:
            hallOfShame += [bC]

    bestFeaturesF = getBestFeatures(buildLCMInputFile(hallOfFame))
    worstFeaturesF = getBestFeatures(buildLCMInputFile(hallOfShame))
    newShips = hallOfFame[:]

    newShips += expertSystem(bestFeaturesF, worstFeaturesF, maxCost, len(hallOfFame), len(hallOfShame))
    shuffle(newShips)

    newShip = [autoStopGeneticAlgorithm(len(newShips), maxCost, nbCombats, initChampions=newShips) for _ in range(2)]
    return autoStopGeneticAlgorithm(len(newShips), maxCost, nbCombats, initChampions=newShips)


def expertSystem(bestFeaturesF, worstFeaturesF, maxCost, nbChampions, nbNoobs):
    uniqueBestFeatures = bestFeaturesNotInWorstFeatures(bestFeaturesF, worstFeaturesF, nbChampions, nbNoobs)

    newShips = []

    ships = {'kestrel': ['typeA', 'typeB', 'typeC'],
             'engiCruiser': ['typeA']}

    with open(uniqueBestFeatures) as bF:
        for line in bF:
            for s in ships:
                for t in ships[s]:
                    nameN = s
                    typeN = t
                    systemsUpgrades, weaponsP, dronesP, energyP = addingToShipFromLCMLine(line, nameN, typeN)
                    newShips += [createRandomShip(maxCost,
                                                  nameShip=nameN, typeShip=typeN,
                                                  systemsUpgradesWanted=systemsUpgrades,
                                                  weaponsWanted=weaponsP,
                                                  dronesWanted=dronesP,
                                                  energyWanted=energyP)]

    return newShips


if __name__ == '__main__':
    print(multipleOptimization(500, 4, 4, nbInitGeneticAlgo=3))