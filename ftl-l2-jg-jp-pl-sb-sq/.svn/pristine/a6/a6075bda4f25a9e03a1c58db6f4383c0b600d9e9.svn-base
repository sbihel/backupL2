\chapter{Recherche du meilleur vaisseau}
	
Un vaisseau est considéré comme bon lorsqu'il gagne plus de combats que ses concurrents. 
On voit donc une logique évolutive où on compare tout le temps les vaisseaux entre eux et où on peut s'inspirer des meilleurs pour essayer de créer d'encore meilleurs vaisseaux. \\
Pour cela, il nous a tout d'abord fallu un générateur de vaisseaux. A partir de ce générateur nous avons pu utilisé un algorithme génétique qui permet d'avoir cette logique évolutive. 
Pour compléter l'optimisation des meilleurs vaisseaux, nous avons utilisé un système expert qui puise ses connaissance dans une base de données où sont stockés les différentes caractéristiques des vaisseaux.


	\section{Algorithmes de génération de vaisseaux}

	Un générateur doit créer un vaisseau en fonction d'un certain coût car c'est ce critère qui différencie les vaisseaux en différentes catégories. Tout d'abord, un générateur aléatoire est nécessaire pour parcourir tout les combinaisons d'équipement possibles. Ensuite, on veut un algorithme plus intelligent qui puisse parcourir ces combinaisons aléatoires pour tirer les meilleures et éventuellement les affiner.

		\subsection{Générateur aléatoire}
		
		\begin{figure}[H]
			\caption{Générateur aléatoire}
			\label{fig:randGen}
			\centering
			\includegraphics[width=0.65\linewidth]{randomGenerator.pdf}
		\end{figure}

		Le générateur aléatoire est simple puisque tant qu'il a de l'argent, il va essayer d'acheter quelque chose de façon aléatoire. Suivant les fonctionnalités gérées par le moteur de combat, nous avons construit le générateur aléatoire selon le schéma de la figure~\ref{fig:randGen}.

		On remarque que l'aléatoire est relativement guidé car certains équipements sont plus ou moins utiles et donc il y a plus ou moins de chance de l'acheter. Ce choix a été fait pour éviter de tomber sur le moins de vaisseaux inutiles mais aussi pour tenir compte des chances de tomber sur les équipements précédents qui ont pu dépenser de l'argent. \\
		
		Les details d'un achat potentiel dépendent en partie de l'équipement choisi. De façon générale pour un système, le générateur va d'abord calculer combien d'améliorations il peut acheter, puis acheter un nombre aléatoire d'améliorations. Directement après, il va essayer d'acheter un nombre aléatoire (inférieur ou égal à l'achat précédent) d'énergie. Prenons l'exemple des moteurs.
		
		\begin{figure}[H]
			\centering
			\includegraphics[width=0.65\linewidth]{randomGeneratorExample.pdf}
		\end{figure}

		Parmi les petits détails dépendants de l'équipement choisi, on peut citer :
		\begin{itemize}
			\item pour les boucliers le générateur va essayer d'acheter les améliorations par 2 mais avec une petite chance de n'acheter qu'une seule upgrade pour atteindre un palier ou pouvoir créer un buffer.
		\end{itemize}
		
		
		\subsection{Algorithme génétique}
		
		Un algorithme génétique reproduit l'évolution naturelle. On part donc d'une population et on détermine les individus qui sont les meilleurs (ceux qui surviveraient dans la nature). A partir de ces individus, on créé une nouvelle population dont les individus peuvent avoir des mutations. On reproduit ainsi ce processus autant de fois que l'on veut.\\
		Dans notre cas, les individus sont des vaisseaux et les gènes sont les achats effectués. L'intégration de l'algorithme ressemble donc à cela.

		\begin{figure}[H]
			\centering
			\includegraphics[width=1\linewidth]{geneticalgorithm.pdf}
		\end{figure}
		
		Pour déterminer les meilleurs vaisseaux, on fait simplement un tournoi et on garde ceux qui on gagné le plus de combats. Un tournoi consiste à faire combattre chaque vaisseau contre chacun des autres vaisseaux (on consrtuit la partie suppérieure à la diagonale d'un tableau carré). Un combat de tournoi est fait de plusieurs combats du moteur de combats et le gagnant est celui qui a gagné plus de la moitié des combats. \\
		Pour faire les croisements il faut deux vaisseaux issus des champions. Pour chacun de ces vaisseaux on garde en mémoire le nombre d'énergie acheté, les armes et drones achetés et les améliorations des systèmes. Ensuite, on créé un nouveau vaisseau de race et type identiques à un des deux vaisseaux pères. A partir de ce moment, on pioche aléatoirement dans les achats des parents pour les ajouter au nouveau vaisseau si il a assez d'argent. \\
		Une mutation est tout simplement le vaisseau resultant d'un croisement entre un vaisseau existant et un nouveau vaisseau aléatoire. \\
		

	\section{Importation des modules}
	
	\begin{figure}[H]
		\centering
		\includegraphics[width=1.2\linewidth]{packageDiagram.pdf}
	\end{figure}
	
	Comme on peut le voir, notre programme est divisé en 3 grandes parties :
	\begin{itemize}
		\item une partie qui gère les combats entre vaisseau (réalisé au semestre 1) ;
		\item une partie qui gère les vaisseaux personnalisés ;
		\item une partie qui utilise les 2 parties précédentes pour determiner le meilleur vaisseau.
	\end{itemize}
	En plus de cela, il y a aussi diverses fonctions d'affichage (graphiques ou textuelles) ainsi qu'un fichier qui contient des variables globales qui determine si il y doit y avoir certains affichages, combien de "cycles" il y a par seconde, etc.

	
	\section{Data Mining avec LCM}
	
	Pour les parties de data mining nous avons utilisé le programme \textit{Linear time Closed itemset Miner} de Takeaki Uno pour extraire les caractéristiques les plus courantes dans une liste de vaisseaux.
	Ce programme prend en entrée un fichier où chaque ligne contient des entiers séparés par des espaces, chacun de ces lignes représente un ensemble d'entiers. 
	Le programme retourne ensuite tous les sous-ensembles de chaque ligne et donne le nombre d'occurences de ces sous-ensembles dans toutes les lignes. La fouille fermée permet de ne garder que les ensembles qui ne sont pas des sous-ensembles. On peut ensuite décider de ne garder que les sous-ensembles qui apparaissent dans au moins n lignes. \\
	
	Le fichier que l'on donne au programme LCM a une ligne pour chaque vaisseau et chaque ligne est constituée des équipements achetés et presents de base (dans les équipements on compte les armes, drones, améliorations et l'énergie). Pour utiliser ce programme il nous a donc fallu traduire les caractéristiques des vaisseaux en entiers, ce que nous avons fait de la façon suivante :
	\begin{itemize}
		\item pour l'énergie, on écrit simplement le nombre d'énergie disponible, donc un nombre compris entre 0 et 25 ;
		\item pour les améliorations des systèmes, on associe à chaque système un nombre plus grand que 3 et on concatène ce nombre avec le nombre d'améliorations faites (toujours moins que 9), le nombre final est compris entre 31 et 179 ;
		\item pour les armes, on associe à chaque arme un nombre et on concatène 10 avec ce nombre, le nombre final est compris entre 1001 et 1030 ;
		\item pour les drones, on associe à chaque drone un nombre et on concatène 11 avec ce nombre, le nombre final est compris entre 1101 et 1120.
	\end{itemize}
	À noter que dans le fichier d'entrée on écrit le niveau d'améliorations ou le niveau d'énergie avec les niveaux précédents pour avoir des sous-ensembles (e.g. pour un niveau de 3 d'énergie : energy1 energy2 energy3). \\
	
	
	
	
	\section{Déroulement de l'algorithme final d'optimisation}


		\begin{figure}[H]
			\caption{Algorithme final}
			\label{fig:finalG}
			\centering
			\includegraphics[width=0.4\linewidth]{finalAlgorithm.pdf}
		\end{figure}

