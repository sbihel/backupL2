from geneticAlgorithm import *
from subprocess import call


def buildLCMInputFile(listShips):
    """

    @param listShips: Like 'kestrelA0.xml'
    """
    if 'xmlShips' in os.getcwd() or 'pictures' in os.getcwd():
        os.chdir('..')
    nameF = 'inputLCM'
    while nameF in os.listdir():
        nameF += '2'
    with open(nameF, 'w') as fileTransitions:
        for shipF in listShips:
            tree = ET.parse('xmlShips/'+shipF)
            root = tree.getroot()

            if root.findall('name') and root.findall('type'):  # 501-599
                namesS = ['kestrel', 'engiCruiser']
                typesS = {'A': '1', 'B': '2', 'C': '3'}
                for i in range(len(namesS)):
                    if namesS[i] == root.findall('name')[0].text:
                        numberN = str(i)
                        break
                fileTransitions.write('5'+numberN+typesS[root.findall('type')[0].text])

            if root.findall('add'):
                k = root.findall('add')[0]

                if k.findall('energy'):  # 0-20
                    e = k.findall('energy')[0].text
                    fileTransitions.write(e+' ')

                if k.findall('system'):  # 21-169
                    numberSystem = {'shields': 2, 'engines': 3, 'weaponControl': 4, 'oxygen': 5, 'medbay': 6,
                                    'cloneBay': 7, 'droneControl': 8, 'hacking': 9, 'mindControl': 10,
                                    'crewTeleporter': 11, 'cloaking': 12, 'piloting': 13, 'sensors': 14,
                                    'doorSystem': 15, 'backupBattery': 16}
                    for s in k.findall('system')[0]:
                        fileTransitions.write(str(numberSystem[s.tag])+s.text+' ')

                if k.findall('weapons'):  # 1001-1030
                    weapons = [('leto', 20, 1), ('artemisPL', 38, 1), ('hermes', 45, 3), ('pegasus', 60, 3),
                               ('breach', 65, 3), ('hull', 65, 2), ('miniBeam', 20, 1), ('pikeBeam', 55, 2),
                               ('halberdBeam', 65, 3), ('glaiveBeam', 95, 4), ('fireBeam', 50, 2), ('hullBeam', 70, 2),
                               ('antibioBeam', 50, 2), ('basicLaser', 20, 1), ('dualLaser', 25, 1),
                               ('burstLaserI', 50, 2), ('burstLaserII', 80, 2), ('burstLaserIII', 95, 4),
                               ('heavyPierceI', 55, 2), ('heavyLaserI', 55, 1), ('heavyLaserII', 65, 3),
                               ('hullLaserI', 55, 2), ('hullLaserII', 75, 3), ('ionBlastI', 30, 1),
                               ('ionBlastII', 70, 3), ('heavyIon', 45, 2), ('ionStunner', 35, 1)]
                    for w in k.findall('weapons')[0]:
                        for indexX in range(len(weapons)):
                            if weapons[indexX][0] == w.text:
                                numberW = indexX
                        fileTransitions.write(str(1001+numberW)+' ')
                if k.findall('drones'):  # 1101-1120
                    drones = [('combat1', 50, 2), ('combat2', 75, 4), ('beam1', 50, 2), ('beam2', 60, 3),
                              ('beamFire', 50, 3)]
                    for d in k.findall('drones')[0]:
                        for indexX in range(len(drones)):
                            if drones[indexX][0] == d.text:
                                numberD = indexX
                        fileTransitions.write(str(1101+numberD)+' ')
                fileTransitions.write('\n')
        fileTransitions.write('[EOF]')
    return nameF


def getBestFeatures(fileLCM):
    cwd = os.getcwd()
    rootF = cwd.split('Projet')[0]
    os.chdir(rootF+'lcm21/')
    call(['make'])
    nameF = 'outputLCM'
    while nameF in os.listdir():
        nameF += '2'
    call(['./fim_all', '../Projet/'+fileLCM, '1', '../Projet/'+nameF])
    call(['./sortout.pl', '../Projet/'+nameF, '../Projet/'+nameF+'sorted'])
    translateLCMoutput(rootF+'Projet/'+nameF+'sorted')
    os.chdir(cwd)
    return nameF


def translateLCMoutput(pathF):
    newF = ''
    with open(pathF) as lcmO:
        line = lcmO.readline()
        while line != '':
            for num in line.split('(')[0].split(' '):
                newF += translateNumber(num) + ' '
            newF += '\n'
            line = lcmO.readline()
    with open(pathF+'translated', 'w') as lcmO:
        lcmO.write(newF)


def translateNumber(num):
    numI = int(num)
    if 0 <= numI <= 20:
        return 'energy'+num
    if 21 <= numI <= 169:
        numberSystem = {2: 'shields', 3: 'engines', 4: 'weaponControl', 5: 'oxygen', 6: 'medbay',
                        7: 'cloneBay', 8: 'droneControl', 9: 'hacking', 10: 'mindControl',
                        11: 'crewTeleporter', 12: 'cloaking', 13: 'piloting', 14: 'sensors',
                        15: 'doorSystem', 16: 'backupBattery'}
        return numberSystem[int(num[:-1])]+num[-1]
    if 501 <= numI <= 599:
        namesS = ['kestrel', 'engiCruiser']
        typesS = {'1': 'A', '2': 'B', '3': 'C'}
        return namesS[num[1]]+typesS[num[-1]]
    if 1001 <= numI <= 1040:
        weapons = [('leto', 20, 1), ('artemisPL', 38, 1), ('hermes', 45, 3), ('pegasus', 60, 3),
                   ('breach', 65, 3), ('hull', 65, 2), ('miniBeam', 20, 1), ('pikeBeam', 55, 2),
                   ('halberdBeam', 65, 3), ('glaiveBeam', 95, 4), ('fireBeam', 50, 2), ('hullBeam', 70, 2),
                   ('antibioBeam', 50, 2), ('basicLaser', 20, 1), ('dualLaser', 25, 1),
                   ('burstLaserI', 50, 2), ('burstLaserII', 80, 2), ('burstLaserIII', 95, 4),
                   ('heavyPierceI', 55, 2), ('heavyLaserI', 55, 1), ('heavyLaserII', 65, 3),
                   ('hullLaserI', 55, 2), ('hullLaserII', 75, 3), ('ionBlastI', 30, 1),
                   ('ionBlastII', 70, 3), ('heavyIon', 45, 2), ('ionStunner', 35, 1)]
        for w in range(len(weapons)):
            if w == numI-1001:
                return weapons[w][0]
    if 1101 <= numI <= 1120:
        drones = [('combat1', 50, 2), ('combat2', 75, 4), ('beam1', 50, 2), ('beam2', 60, 3),
                  ('beamFire', 50, 3)]
        for d in range(len(drones)):
            if d == numI - 1101:
                return drones[d][0]
    return ''


if __name__ == '__main__':
    getBestFeatures(buildLCMInputFile(['kestrelC1.xml', 'kestrelA1.xml', 'engiCruiserA2.xml']))